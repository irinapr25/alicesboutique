//REM
@function rem($px) {
	// $result: $px / 16 + rem;
	$result: math.div($px, 16) + rem;
	@return $result;
}

//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}

//Адаптивное свойство
@mixin adaptiveValue(
	$property,
	$startSize,
	$minSize,
	$widthFrom: $containerWidth,
	$widthTo: $minWidth,
	$keepSize: 0
) {
	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}
	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	$flyValue: #{rem($yIntersection)} '+' #{$slope * 100}vw;

	$propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

	@if $widthFrom == $containerWidth or $widthFrom == $maxWidth or $keepSize == 1 or $keepSize == 2
	{
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		#{$property}: $propertyValue;
	}
	@if $widthTo == $minWidth or $keepSize == 1 or $keepSize == 3 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}
